# -*- coding: utf-8 -*-
"""Mineração de Áudio - Agrupamento usando Modelos Pré-treinados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z78dYaYpnBA9pqT5bxnLbhnqBlOPGjto

# Instalando e importando bibliotecas
"""

#!pip install "tensorflow<1.14" # CPU-only version
#!pip install "tensorflow-gpu<1.14" # GPU version

#!apt-get install libsndfile1

#!pip install openl3

"""# Obtendo o dataset"""

#!git clone https://github.com/1fmusic/Audio_cat_dog_classification

from os import listdir
from os.path import isfile, join
cat_wav_files = [f for f in listdir('Audio_cat_dog_classification/cats/') if isfile(join('Audio_cat_dog_classification/cats/', f)) and '.wav' in f and 'cat' in f]
dog_wav_files = [f for f in listdir('Audio_cat_dog_classification/dogs/') if isfile(join('Audio_cat_dog_classification/dogs/', f)) and '.wav' in f and 'dog' in f]

import openl3
import soundfile as sf

audio_list = []
sr_list = []
y = []
for cat_file in cat_wav_files:
  audio, sr = sf.read('Audio_cat_dog_classification/cats/'+cat_file)
  audio_list.append(audio)
  sr_list.append(sr)
  y.append('cat')

for dog_file in dog_wav_files:
  audio, sr = sf.read('Audio_cat_dog_classification/dogs/'+dog_file)
  audio_list.append(audio)
  sr_list.append(sr)
  y.append('dog')

"""# Gerando Embeddings de Áudio"""

# https://openl3.readthedocs.io/en/latest/tutorial.html#extracting-audio-embeddings
emb_list, ts_list = openl3.get_audio_embedding(audio_list, sr_list, batch_size=32, content_type="env", embedding_size=6144)

emb_list[0].shape

emb_list[1].shape

emb_list[2].shape

import numpy as np

X_data = []

for emb in emb_list:
  X_data.append(np.mean(emb,axis=0))

X_data = np.array(X_data)
X_data.shape

"""# Projetando com t-SNE (tente usar PCA também)
- t-Distributed Stochastic Neighbor Embedding (t-SNE)
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.manifold import TSNE
# %matplotlib inline
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pyplot as plt
import seaborn as sns
sns.set(rc={'figure.figsize':(11.7,8.27)})
palette = sns.color_palette("bright", 10)

tsne = TSNE(n_components=2, verbose=1, perplexity=10, n_iter=5000)
tsne_results = tsne.fit_transform(X_data)

sns.scatterplot(tsne_results[:,0], tsne_results[:,1], hue=y, legend='full', palette=palette[0:2])

"""# Agrupamento com k-Means"""

import pandas as pd

L_audio = []
L_embedding = []
L_classe = []

wav_files = cat_wav_files+dog_wav_files

total = len(X_data)
for i in range(0,total):
  L_audio.append(wav_files[i])
  L_embedding.append(X_data[i])
  L_classe.append(y[i])

df = pd.DataFrame()
df['audio'] = L_audio
df['embedding'] = L_embedding
df['classe'] = L_classe

df

from sklearn.cluster import KMeans
import numpy as np

kmeans = KMeans(n_clusters=2, random_state=0).fit(df['embedding'].to_list())
kmeans.labels_

from sklearn.metrics.cluster import normalized_mutual_info_score
normalized_mutual_info_score(df['classe'].to_list(), kmeans.labels_)

